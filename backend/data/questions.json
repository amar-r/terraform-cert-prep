[
  {
    "id": 1,
    "question": "What is the primary purpose of Terraform?",
    "options": [
      "A. To provide Infrastructure as Code (IaC) capabilities",
      "B. To monitor cloud infrastructure",
      "C. To manage application deployments",
      "D. To provide container orchestration"
    ],
    "correct_answer": "A",
    "explanation": "Terraform is primarily designed to provide Infrastructure as Code (IaC) capabilities, allowing you to define and provision infrastructure using declarative configuration files.",
    "domain": "IaC Concepts"
  },
  {
    "id": 2,
    "question": "Which command is used to initialize a Terraform working directory?",
    "options": [
      "A. terraform start",
      "B. terraform init",
      "C. terraform begin",
      "D. terraform setup"
    ],
    "correct_answer": "B",
    "explanation": "The 'terraform init' command initializes a working directory containing Terraform configuration files. It downloads required providers and sets up the backend.",
    "domain": "CLI"
  },
  {
    "id": 3,
    "question": "What file extension is used for Terraform configuration files?",
    "options": [
      "A. .tf",
      "B. .terraform",
      "C. .config",
      "D. .hcl"
    ],
    "correct_answer": "A",
    "explanation": "Terraform configuration files use the .tf extension. While .tf.json is also supported for JSON syntax, .tf is the standard extension for HCL (HashiCorp Configuration Language) files.",
    "domain": "IaC Concepts"
  },
  {
    "id": 4,
    "question": "Which command creates an execution plan showing what Terraform will do when applying changes?",
    "options": [
      "A. terraform show",
      "B. terraform plan",
      "C. terraform preview",
      "D. terraform check"
    ],
    "correct_answer": "B",
    "explanation": "The 'terraform plan' command creates an execution plan, showing what actions Terraform will take to reach the desired state defined in the configuration files.",
    "domain": "CLI"
  },
  {
    "id": 5,
    "question": "What is the Terraform state file used for?",
    "options": [
      "A. Storing configuration templates",
      "B. Tracking resource metadata and mapping to real-world resources",
      "C. Logging Terraform operations",
      "D. Storing provider credentials"
    ],
    "correct_answer": "B",
    "explanation": "The Terraform state file is used to track resource metadata and map Terraform resources to real-world infrastructure. It helps Terraform understand what it has created and manage updates.",
    "domain": "State"
  },
  {
    "id": 6,
    "question": "How do you define a variable in Terraform?",
    "options": [
      "A. Using the 'var' block",
      "B. Using the 'variable' block",
      "C. Using the 'input' block",
      "D. Using the 'parameter' block"
    ],
    "correct_answer": "B",
    "explanation": "Variables in Terraform are defined using the 'variable' block. This allows you to parameterize your configurations and make them reusable.",
    "domain": "Variables"
  },
  {
    "id": 7,
    "question": "What is the default filename for Terraform state?",
    "options": [
      "A. state.tf",
      "B. terraform.state",
      "C. terraform.tfstate",
      "D. .terraform/state"
    ],
    "correct_answer": "C",
    "explanation": "The default filename for Terraform state is 'terraform.tfstate'. This file is created in the working directory and contains the current state of your infrastructure.",
    "domain": "State"
  },
  {
    "id": 8,
    "question": "Which command applies the changes required to reach the desired state of the configuration?",
    "options": [
      "A. terraform deploy",
      "B. terraform apply",
      "C. terraform execute",
      "D. terraform run"
    ],
    "correct_answer": "B",
    "explanation": "The 'terraform apply' command applies the changes required to reach the desired state of the configuration. It executes the actions proposed in a Terraform plan.",
    "domain": "CLI"
  },
  {
    "id": 9,
    "question": "What is a Terraform module?",
    "options": [
      "A. A single Terraform configuration file",
      "B. A container for multiple Terraform resources",
      "C. A collection of connected resources that are used together",
      "D. A plugin for extending Terraform functionality"
    ],
    "correct_answer": "C",
    "explanation": "A Terraform module is a collection of connected resources that are used together. Modules are used to create reusable components in Terraform and organize configuration into logical groups.",
    "domain": "Modules"
  },
  {
    "id": 10,
    "question": "How do you reference a variable value in Terraform configuration?",
    "options": [
      "A. ${var.variable_name}",
      "B. var.variable_name",
      "C. $variable_name",
      "D. Both A and B are correct"
    ],
    "correct_answer": "D",
    "explanation": "Both ${var.variable_name} (interpolation syntax) and var.variable_name (new syntax in Terraform 0.12+) are correct ways to reference variable values in Terraform configuration.",
    "domain": "Variables"
  },
  {
    "id": 11,
    "question": "What happens when you run 'terraform destroy'?",
    "options": [
      "A. It removes only the Terraform configuration files",
      "B. It destroys all resources managed by the Terraform configuration",
      "C. It resets the Terraform state file",
      "D. It removes the .terraform directory"
    ],
    "correct_answer": "B",
    "explanation": "The 'terraform destroy' command destroys all resources managed by the Terraform configuration. It's essentially the opposite of 'terraform apply'.",
    "domain": "CLI"
  },
  {
    "id": 12,
    "question": "Which block is used to configure a provider in Terraform?",
    "options": [
      "A. resource",
      "B. provider",
      "C. terraform",
      "D. data"
    ],
    "correct_answer": "B",
    "explanation": "The 'provider' block is used to configure providers in Terraform. Providers are responsible for understanding API interactions and exposing resources.",
    "domain": "Providers"
  },
  {
    "id": 13,
    "question": "What is the purpose of the terraform.tfvars file?",
    "options": [
      "A. To define variable types",
      "B. To provide default values for variables",
      "C. To set specific values for variables",
      "D. To validate variable inputs"
    ],
    "correct_answer": "C",
    "explanation": "The terraform.tfvars file is used to set specific values for variables. It's automatically loaded by Terraform and allows you to provide concrete values for your variable definitions.",
    "domain": "Variables"
  },
  {
    "id": 14,
    "question": "Which command shows the current state or a saved plan?",
    "options": [
      "A. terraform state",
      "B. terraform show",
      "C. terraform list",
      "D. terraform view"
    ],
    "correct_answer": "B",
    "explanation": "The 'terraform show' command shows the current state or a saved plan in a human-readable format. It can display the current state file or examine a plan file.",
    "domain": "CLI"
  },
  {
    "id": 15,
    "question": "What is remote state in Terraform?",
    "options": [
      "A. State stored on a remote server or cloud service",
      "B. State that tracks remote resources only",
      "C. State that is automatically backed up",
      "D. State that requires VPN access"
    ],
    "correct_answer": "A",
    "explanation": "Remote state in Terraform refers to storing the state file on a remote server or cloud service (like S3, Azure Storage, etc.) instead of locally. This enables team collaboration and provides better security and reliability.",
    "domain": "State"
  },
  {
    "id": 16,
    "question": "How do you call a module in Terraform?",
    "options": [
      "A. Using the 'module' block",
      "B. Using the 'import' statement",
      "C. Using the 'include' directive",
      "D. Using the 'call' function"
    ],
    "correct_answer": "A",
    "explanation": "Modules are called in Terraform using the 'module' block. This allows you to use a module and pass input variables to it.",
    "domain": "Modules"
  },
  {
    "id": 17,
    "question": "What is the purpose of output values in Terraform?",
    "options": [
      "A. To display information about resources after creation",
      "B. To log Terraform operations",
      "C. To validate resource configurations",
      "D. To store temporary values during execution"
    ],
    "correct_answer": "A",
    "explanation": "Output values in Terraform are used to display information about resources after they are created. They can also be used to share data between different Terraform configurations or modules.",
    "domain": "Variables"
  },
  {
    "id": 18,
    "question": "Which command validates the Terraform configuration files?",
    "options": [
      "A. terraform check",
      "B. terraform validate",
      "C. terraform verify",
      "D. terraform test"
    ],
    "correct_answer": "B",
    "explanation": "The 'terraform validate' command validates the configuration files in a directory, referring only to the configuration and not accessing any remote services.",
    "domain": "CLI"
  },
  {
    "id": 19,
    "question": "What is state locking in Terraform?",
    "options": [
      "A. Encrypting the state file",
      "B. Preventing concurrent operations on the same state",
      "C. Making the state file read-only",
      "D. Backing up the state file automatically"
    ],
    "correct_answer": "B",
    "explanation": "State locking in Terraform prevents concurrent operations on the same state file to avoid corruption. It ensures that only one Terraform operation can run at a time against a particular state.",
    "domain": "State"
  },
  {
    "id": 20,
    "question": "What is Terraform Cloud primarily used for?",
    "options": [
      "A. Hosting Terraform configuration files",
      "B. Remote operations, state management, and collaboration",
      "C. Creating cloud resources directly",
      "D. Monitoring infrastructure performance"
    ],
    "correct_answer": "B",
    "explanation": "Terraform Cloud is primarily used for remote operations, state management, and team collaboration. It provides a managed service for running Terraform with features like remote state storage, policy enforcement, and team workflows.",
    "domain": "Terraform Cloud"
  },
  {
    "id": 21,
    "question": "Which Terraform command formats your configuration files?",
    "options": [
      "A. terraform format",
      "B. terraform fmt",
      "C. terraform style",
      "D. terraform beautify"
    ],
    "correct_answer": "B",
    "explanation": "The 'terraform fmt' command formats Terraform configuration files to a canonical format and style. It's useful for maintaining consistent code formatting across teams.",
    "domain": "CLI"
  },
  {
    "id": 22,
    "question": "What is the purpose of data sources in Terraform?",
    "options": [
      "A. To create new resources",
      "B. To read information from existing infrastructure",
      "C. To store configuration data",
      "D. To define input variables"
    ],
    "correct_answer": "B",
    "explanation": "Data sources in Terraform are used to read information from existing infrastructure or external systems. They allow you to reference data that exists outside of your Terraform configuration.",
    "domain": "Data Sources"
  },
  {
    "id": 23,
    "question": "Which file is automatically created when you run 'terraform init'?",
    "options": [
      "A. terraform.tfstate",
      "B. .terraform.lock.hcl",
      "C. terraform.tfvars",
      "D. main.tf"
    ],
    "correct_answer": "B",
    "explanation": "The '.terraform.lock.hcl' file is automatically created when you run 'terraform init'. This file locks provider versions to ensure consistent provider versions across team members.",
    "domain": "CLI"
  },
  {
    "id": 24,
    "question": "What does HCL stand for in Terraform?",
    "options": [
      "A. HashiCorp Configuration Language",
      "B. High-level Configuration Language",
      "C. Human Configuration Language",
      "D. Hybrid Configuration Language"
    ],
    "correct_answer": "A",
    "explanation": "HCL stands for HashiCorp Configuration Language. It's the language used to write Terraform configuration files and is designed to be both human and machine-readable.",
    "domain": "IaC Concepts"
  },
  {
    "id": 25,
    "question": "Which meta-argument can be used to create multiple instances of a resource?",
    "options": [
      "A. depends_on",
      "B. count",
      "C. lifecycle",
      "D. provider"
    ],
    "correct_answer": "B",
    "explanation": "The 'count' meta-argument can be used to create multiple instances of a resource. When count is set to a number greater than 1, Terraform will create that many instances of the resource.",
    "domain": "Resources"
  },
  {
    "id": 26,
    "question": "What is the purpose of the 'depends_on' meta-argument?",
    "options": [
      "A. To specify explicit dependencies between resources",
      "B. To count the number of resources",
      "C. To set lifecycle rules",
      "D. To configure provider settings"
    ],
    "correct_answer": "A",
    "explanation": "The 'depends_on' meta-argument is used to specify explicit dependencies between resources when the dependency cannot be automatically inferred by Terraform.",
    "domain": "Resources"
  },
  {
    "id": 27,
    "question": "Which command would you use to see what resources are in your Terraform state?",
    "options": [
      "A. terraform state show",
      "B. terraform state list",
      "C. terraform list",
      "D. terraform show"
    ],
    "correct_answer": "B",
    "explanation": "The 'terraform state list' command shows all resources in your Terraform state file. It provides a list of all resources currently tracked by Terraform.",
    "domain": "State"
  },
  {
    "id": 28,
    "question": "What happens if you remove a resource from your Terraform configuration but don't run 'terraform destroy'?",
    "options": [
      "A. The resource is automatically deleted",
      "B. Terraform will plan to destroy the resource on next apply",
      "C. The resource remains but is no longer managed by Terraform",
      "D. An error occurs"
    ],
    "correct_answer": "B",
    "explanation": "If you remove a resource from your Terraform configuration, Terraform will plan to destroy that resource the next time you run 'terraform apply', since it's no longer defined in the desired state.",
    "domain": "Resources"
  },
  {
    "id": 29,
    "question": "Which variable type allows you to set a default value that can be overridden?",
    "options": [
      "A. local",
      "B. variable",
      "C. output",
      "D. data"
    ],
    "correct_answer": "B",
    "explanation": "Input variables defined with the 'variable' block can have default values that can be overridden by providing values through terraform.tfvars files, command-line flags, or environment variables.",
    "domain": "Variables"
  },
  {
    "id": 30,
    "question": "What is the purpose of local values in Terraform?",
    "options": [
      "A. To store temporary values during execution",
      "B. To assign a name to an expression for reuse within a module",
      "C. To define input parameters",
      "D. To configure provider settings"
    ],
    "correct_answer": "B",
    "explanation": "Local values (locals) are used to assign a name to an expression, allowing you to reuse it multiple times within a module without repeating the expression.",
    "domain": "Variables"
  },
  {
    "id": 31,
    "question": "Which backend type stores state locally on disk?",
    "options": [
      "A. s3",
      "B. remote",
      "C. local",
      "D. azurerm"
    ],
    "correct_answer": "C",
    "explanation": "The 'local' backend stores state locally on disk in the terraform.tfstate file. This is the default backend when no backend configuration is specified.",
    "domain": "State"
  },
  {
    "id": 32,
    "question": "What is the primary benefit of using remote state?",
    "options": [
      "A. Faster execution",
      "B. Better security and team collaboration",
      "C. Reduced configuration complexity",
      "D. Automatic resource cleanup"
    ],
    "correct_answer": "B",
    "explanation": "Remote state provides better security by storing sensitive state data remotely and enables team collaboration by allowing multiple team members to work with the same state.",
    "domain": "State"
  },
  {
    "id": 33,
    "question": "Which Terraform block is used to specify required providers?",
    "options": [
      "A. provider",
      "B. terraform",
      "C. required_providers",
      "D. configuration"
    ],
    "correct_answer": "B",
    "explanation": "The 'terraform' block is used to specify required providers, Terraform version constraints, and other settings. Within this block, you use 'required_providers' to specify provider requirements.",
    "domain": "Providers"
  },
  {
    "id": 34,
    "question": "What does it mean when Terraform shows a '+' in a plan output?",
    "options": [
      "A. A resource will be updated",
      "B. A resource will be created",
      "C. A resource will be destroyed",
      "D. A resource will be replaced"
    ],
    "correct_answer": "B",
    "explanation": "In Terraform plan output, a '+' symbol indicates that a resource will be created. This means Terraform will add a new resource that doesn't currently exist.",
    "domain": "CLI"
  },
  {
    "id": 35,
    "question": "What does it mean when Terraform shows a '-' in a plan output?",
    "options": [
      "A. A resource will be updated",
      "B. A resource will be created",
      "C. A resource will be destroyed",
      "D. A resource will be replaced"
    ],
    "correct_answer": "C",
    "explanation": "In Terraform plan output, a '-' symbol indicates that a resource will be destroyed. This means Terraform will delete an existing resource.",
    "domain": "CLI"
  },
  {
    "id": 36,
    "question": "Which command would you use to import existing infrastructure into Terraform state?",
    "options": [
      "A. terraform add",
      "B. terraform import",
      "C. terraform include",
      "D. terraform attach"
    ],
    "correct_answer": "B",
    "explanation": "The 'terraform import' command is used to import existing infrastructure into Terraform state, allowing you to manage resources that were created outside of Terraform.",
    "domain": "State"
  },
  {
    "id": 37,
    "question": "What is the purpose of the lifecycle meta-argument?",
    "options": [
      "A. To count resources",
      "B. To control resource creation and destruction behavior",
      "C. To set dependencies",
      "D. To configure providers"
    ],
    "correct_answer": "B",
    "explanation": "The lifecycle meta-argument is used to control resource creation and destruction behavior, such as preventing destruction, creating before destroying, or ignoring changes to certain attributes.",
    "domain": "Resources"
  },
  {
    "id": 38,
    "question": "Which file should you add to .gitignore in a Terraform project?",
    "options": [
      "A. main.tf",
      "B. terraform.tfvars",
      "C. terraform.tfstate",
      "D. variables.tf"
    ],
    "correct_answer": "C",
    "explanation": "The terraform.tfstate file should be added to .gitignore because it contains sensitive information about your infrastructure and should not be stored in version control.",
    "domain": "State"
  },
  {
    "id": 39,
    "question": "What is the for_each meta-argument used for?",
    "options": [
      "A. To iterate over a list and create multiple resources",
      "B. To set dependencies between resources",
      "C. To configure lifecycle rules",
      "D. To define output values"
    ],
    "correct_answer": "A",
    "explanation": "The for_each meta-argument is used to iterate over a map or set and create multiple instances of a resource, with each instance corresponding to an item in the map or set.",
    "domain": "Resources"
  },
  {
    "id": 40,
    "question": "Which of the following is NOT a valid Terraform variable type?",
    "options": [
      "A. string",
      "B. number",
      "C. boolean",
      "D. integer"
    ],
    "correct_answer": "D",
    "explanation": "Terraform uses 'number' as the type for numeric values, not 'integer'. The basic types in Terraform are string, number, and boolean.",
    "domain": "Variables"
  },
  {
    "id": 41,
    "question": "What is workspace in Terraform used for?",
    "options": [
      "A. To organize configuration files",
      "B. To manage multiple environments with the same configuration",
      "C. To store provider credentials",
      "D. To define resource dependencies"
    ],
    "correct_answer": "B",
    "explanation": "Workspaces in Terraform allow you to manage multiple environments (like dev, staging, prod) using the same configuration files but with separate state files.",
    "domain": "Workspaces"
  },
  {
    "id": 42,
    "question": "Which command shows the current workspace?",
    "options": [
      "A. terraform workspace show",
      "B. terraform workspace current",
      "C. terraform workspace list",
      "D. terraform workspace get"
    ],
    "correct_answer": "A",
    "explanation": "The 'terraform workspace show' command displays the name of the current workspace. You can also use 'terraform workspace list' to see all workspaces with the current one marked.",
    "domain": "Workspaces"
  },
  {
    "id": 43,
    "question": "What is the purpose of provider aliases in Terraform?",
    "options": [
      "A. To use multiple configurations of the same provider",
      "B. To rename providers",
      "C. To version providers",
      "D. To secure provider credentials"
    ],
    "correct_answer": "A",
    "explanation": "Provider aliases allow you to use multiple configurations of the same provider within a single configuration, such as deploying to multiple AWS regions or accounts.",
    "domain": "Providers"
  },
  {
    "id": 44,
    "question": "What happens when you run 'terraform apply' without running 'terraform plan' first?",
    "options": [
      "A. An error occurs",
      "B. Terraform automatically runs plan before applying",
      "C. Changes are applied without showing a plan",
      "D. Only configuration validation occurs"
    ],
    "correct_answer": "B",
    "explanation": "When you run 'terraform apply' without a saved plan, Terraform automatically runs the planning phase first and shows you the plan before asking for confirmation to apply the changes.",
    "domain": "CLI"
  },
  {
    "id": 45,
    "question": "Which function can be used to read the contents of a file in Terraform?",
    "options": [
      "A. read()",
      "B. file()",
      "C. load()",
      "D. get()"
    ],
    "correct_answer": "B",
    "explanation": "The file() function in Terraform reads the contents of a file at the given path and returns it as a string. This is useful for reading configuration files, scripts, or other text files.",
    "domain": "Functions"
  },
  {
    "id": 46,
    "question": "What is the purpose of the templatefile() function?",
    "options": [
      "A. To create new template files",
      "B. To read and render a template file with variables",
      "C. To validate template syntax",
      "D. To compress template files"
    ],
    "correct_answer": "B",
    "explanation": "The templatefile() function reads a file from the specified path and renders it as a template using variables provided as the second argument.",
    "domain": "Functions"
  },
  {
    "id": 47,
    "question": "Which command can be used to remove a resource from Terraform state without destroying it?",
    "options": [
      "A. terraform state rm",
      "B. terraform remove",
      "C. terraform delete",
      "D. terraform state delete"
    ],
    "correct_answer": "A",
    "explanation": "The 'terraform state rm' command removes a resource from the Terraform state file without destroying the actual infrastructure. The resource will no longer be managed by Terraform.",
    "domain": "State"
  },
  {
    "id": 48,
    "question": "What is the difference between 'count' and 'for_each' meta-arguments?",
    "options": [
      "A. There is no difference",
      "B. count uses numbers, for_each uses maps or sets",
      "C. count is for resources, for_each is for modules",
      "D. count is deprecated, for_each is the new way"
    ],
    "correct_answer": "B",
    "explanation": "The 'count' meta-argument uses a number to create multiple instances (indexed by number), while 'for_each' uses a map or set to create instances (indexed by the map key or set value).",
    "domain": "Resources"
  },
  {
    "id": 49,
    "question": "Which directory contains downloaded provider plugins after running 'terraform init'?",
    "options": [
      "A. .terraform/providers",
      "B. .terraform/plugins",
      "C. providers/",
      "D. plugins/"
    ],
    "correct_answer": "A",
    "explanation": "After running 'terraform init', downloaded provider plugins are stored in the '.terraform/providers' directory within your working directory.",
    "domain": "Providers"
  },
  {
    "id": 50,
    "question": "What is the purpose of the sensitive argument in variable blocks?",
    "options": [
      "A. To encrypt the variable value",
      "B. To prevent the value from being displayed in logs and UI",
      "C. To require authentication to access the value",
      "D. To store the value remotely"
    ],
    "correct_answer": "B",
    "explanation": "The 'sensitive' argument in variable blocks prevents Terraform from displaying the variable's value in logs, console output, or UI to protect sensitive information like passwords or API keys.",
    "domain": "Variables"
  },
  {
    "id": 51,
    "question": "Which Terraform command can upgrade provider versions according to version constraints?",
    "options": [
      "A. terraform upgrade",
      "B. terraform init -upgrade",
      "C. terraform update",
      "D. terraform provider upgrade"
    ],
    "correct_answer": "B",
    "explanation": "The 'terraform init -upgrade' command upgrades provider versions according to the version constraints specified in your configuration while updating the lock file.",
    "domain": "Providers"
  },
  {
    "id": 52,
    "question": "What is the purpose of the terraform refresh command?",
    "options": [
      "A. To refresh the configuration files",
      "B. To update the state file with real infrastructure",
      "C. To refresh provider credentials",
      "D. To reload modules"
    ],
    "correct_answer": "B",
    "explanation": "The 'terraform refresh' command updates the state file with the real-world state of your infrastructure, helping to identify drift between your state and actual resources.",
    "domain": "State"
  },
  {
    "id": 53,
    "question": "Which of the following is true about Terraform modules?",
    "options": [
      "A. Modules can only be stored locally",
      "B. Modules can be sourced from various locations including registries",
      "C. Modules cannot have input variables",
      "D. Modules are only for organizing files"
    ],
    "correct_answer": "B",
    "explanation": "Terraform modules can be sourced from various locations including the Terraform Registry, Git repositories, HTTP URLs, local file paths, and more.",
    "domain": "Modules"
  },
  {
    "id": 54,
    "question": "What is the purpose of version constraints in Terraform?",
    "options": [
      "A. To ensure consistent provider and module versions",
      "B. To limit the number of resources",
      "C. To control access permissions",
      "D. To optimize performance"
    ],
    "correct_answer": "A",
    "explanation": "Version constraints in Terraform ensure that you use consistent and compatible versions of providers and modules across different environments and team members.",
    "domain": "Providers"
  },
  {
    "id": 55,
    "question": "Which statement is true about terraform validate?",
    "options": [
      "A. It checks if resources exist in the cloud",
      "B. It validates syntax and configuration consistency",
      "C. It validates provider credentials",
      "D. It validates the state file"
    ],
    "correct_answer": "B",
    "explanation": "The 'terraform validate' command validates the syntax and internal consistency of Terraform configuration files, but it does not check if resources exist in the actual infrastructure.",
    "domain": "CLI"
  }
] 